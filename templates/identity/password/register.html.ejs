<h1>Create account</h1>
<form method="post" id="mainForm">
    <p class="error" id="error"></p>

    <fieldset>
        <p>Choose the credentials you want to use to log in to this server in the future</p>
        <ol>
            <li>
                <label for="email">Email:</label>
                <input id="email" type="email" value="zoo@gmail.com" name="email" autofocus />
            </li>
            <li>
                <label for="userName">Username:</label>
                <input id="username" type="text" value="zoo" name="username" required />
            </li>
            <li>
                <label for="password">Password:</label>
                <input id="password" type="password" value="vankien" name="password" />
            </li>
            <li>
                <label for="confirmPassword">Confirm password:</label>
                <input id="confirmPassword" type="password" value="vankien" name="confirmPassword" />
            </li>
        </ol>
    </fieldset>

    <p class="actions">
        <button type="submit" name="submit" disabled>Register</button>
        <button type="button" id="login-link">Back</button>
    </p>
</form>

<script>
    let passwordCreateUrl;
    let oidcLocation;

    const convertJSON = (text) => {
        try {
            return JSON.stringify(text);
        } catch (error) {
            return text;
        }
    };

    (async () => {
        let controls = await fetchControls('<%= idpIndex %>');

        setRedirectClick('login-link', controls.html.password.login);

        addPostListener(async () => {
            validatePasswordConfirmation('password');

            // Caching account in case there is an error adding the password login
            if (!passwordCreateUrl) {
                const res = await fetch(controls.account.create, {
                    method: 'POST',
                });
                const json = await res.json();
                // Will only be defined if we are in a OIDC interaction
                oidcLocation = json.location;

                // Now with cookie
                controls = await fetchControls('<%= idpIndex %>');
                passwordCreateUrl = controls.password.create;
            }

            await postJsonForm(passwordCreateUrl);

            // In case there is an OIDC location, we need to fetch it to force the OIDC library to go to the next step
            if (oidcLocation) {
                // Doing this after creating the password login to prevent incomplete accounts
                await fetch(oidcLocation);
            }

            // We go to the account page even if we are in a OIDC interaction
            // as the user would need to link a WebID anyway before an interaction can be completed.
            location.href = controls.html.account.account;
        });
    })();
</script>
